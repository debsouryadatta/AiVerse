
 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
  likes     Like[]
  comments  Comment[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


model Course {
  id              String @id @default(cuid())
  title           String
  image           String
  description     String
  units           Chapter[]
  userId          String
  likes           Like[]
  comments        Comment[]
  user            User @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId")
}


model Chapter {
  id                    String    @id @default(cuid())
  courseId              String

  title                  String
  subtopics             String[]
  subtopicExplanations  String[]

  youtubeSearchQuery    String
  videoId               String?
  summary               String?    @db.VarChar(3000)
  course                Course     @relation(fields: [courseId], references: [id])

  @@index([courseId], name: "courseId")
}


model Like {
  id      String @id @default(cuid())
  userId  String
  courseId String

  user    User   @relation(fields: [userId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])

  @@index([userId], name: "userId2")
  @@index([courseId], name: "courseId2")
}

model Comment {
  id      String @id @default(cuid())
  userId  String
  courseId String
  text    String
  user    User   @relation(fields: [userId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])

  @@index([userId], name: "userId3")
  @@index([courseId], name: "courseId3")
}