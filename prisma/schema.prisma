generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  email         String          @unique
  emailVerified DateTime?
  image         String?
  name          String?
  updatedAt     DateTime        @updatedAt
  bio           String?         @default("Update bio")
  credits       Int             @default(2000)
  accounts      Account[]
  Authenticator Authenticator[]
  bookmarks     Bookmark[]
  comments      Comment[]
  courses       Course[]
  followers     Follow[]        @relation("UserFollowers")
  following     Follow[]        @relation("UserFollowing")
  gameScores    GameScore[]
  likes         Like[]
  posts         Post[]
  roadmaps      Roadmap[]
  sessions      Session[]
  purchases     UserPurchase[]
  VoiceMentor   VoiceMentor[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Course {
  id          String     @id @default(cuid())
  title       String
  image       String
  description String
  userId      String
  inviteCode  String?    @unique
  visibility  String     @default("public")
  mcqs        Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  featured    Boolean    @default(false)
  bookmarks   Bookmark[]
  units       Chapter[]
  comments    Comment[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]

  @@index([userId], map: "userId")
}

model Chapter {
  id                   String   @id @default(cuid())
  courseId             String
  subtopics            String[]
  subtopicExplanations String[]
  youtubeSearchQuery   String
  videoId              String?
  summary              String?  @db.VarChar(3000)
  title                String
  course               Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId], map: "courseId")
}

model Like {
  id       String  @id @default(cuid())
  userId   String
  courseId String?
  postId   String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  post     Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId], name: "unique_course_like")
  @@unique([userId, postId], name: "unique_post_like")
  @@index([userId])
  @@index([courseId])
  @@index([postId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String?
  text      String
  createdAt DateTime @default(now())
  postId    String?
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
  @@index([postId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  courseId  String?
  createdAt DateTime @default(now())
  postId    String?
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId], name: "unique_course_bookmark")
  @@unique([userId, postId], name: "unique_post_bookmark")
  @@index([userId])
  @@index([courseId])
  @@index([postId])
}

model Post {
  id        String     @id @default(cuid())
  userId    String
  caption   String?
  mediaUrl  String
  mediaType String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bookmarks Bookmark[]
  comments  Comment[]
  likes     Like[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  follower    User   @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Roadmap {
  id      String @id @default(cuid())
  userId  String
  title   String
  roadmap Json
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "userId5")
}

model UserPurchase {
  id                        String   @id @default(cuid())
  userId                    String
  creditsAmount             Int
  amount                    Float
  currency                  String   @default("USD")
  status                    String
  stripePaymentIntentId     String
  stripePaymentIntentStatus String
  createdAt                 DateTime @default(now())
  user                      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VoiceMentor {
  id          String   @id @default(cuid())
  name        String
  description String
  lastUsed    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  voiceId     String
  chatHistory Json[]   @default([])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model GameScore {
  id             String   @id @default(cuid())
  userId         String
  courseId       String?
  score          Int
  totalQuestions Int?
  correctAnswers Int?
  timeSpent      Int?
  difficulty     String   @default("medium")
  metadata       Json?
  createdAt      DateTime @default(now())
  quizType       String   @default("quick-solo")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizType])
  @@index([createdAt])
}
