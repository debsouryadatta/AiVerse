generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  bio           String?         @default("Update bio")
  credits       Int             @default(2000)  // Default to hobby tier credits
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  VoiceMentor   VoiceMentor[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  courses   Course[]
  likes     Like[]
  comments  Comment[]
  bookmarks Bookmark[]
  followers Follow[]   @relation("UserFollowers")
  following Follow[]   @relation("UserFollowing")
  roadmaps   Roadmap[]
  posts      Post[]
  purchases  UserPurchase[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Course {
  id          String     @id @default(cuid())
  title       String
  image       String
  description String
  units       Chapter[]
  userId      String
  visibility  String     @default("public")
  inviteCode  String?    @unique
  mcqs        Json?
  likes       Like[]
  comments    Comment[]
  bookmarks   Bookmark[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

model Chapter {
  id       String @id @default(cuid())
  courseId String

  title                String
  subtopics            String[]
  subtopicExplanations String[]

  youtubeSearchQuery String
  videoId            String?
  summary            String? @db.VarChar(3000)
  course             Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId], name: "courseId")
}

model Like {
  id       String  @id @default(cuid())
  userId   String
  courseId String?
  postId   String?
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  post     Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId], name: "unique_course_like")
  @@unique([userId, postId], name: "unique_post_like")
  @@index([userId])
  @@index([courseId])
  @@index([postId])
}

model Comment {
  id       String  @id @default(cuid())
  userId   String
  courseId String?
  postId   String?
  text     String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  post     Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([courseId])
  @@index([postId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  courseId  String?
  postId    String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, courseId], name: "unique_course_bookmark")
  @@unique([userId, postId], name: "unique_post_bookmark")
  @@index([userId])
  @@index([courseId])
  @@index([postId])
}

model Post {
  id          String     @id @default(cuid())
  userId      String
  caption     String?
  mediaUrl    String     // URL for image or video
  mediaType   String     // "image" or "video"
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  likes       Like[]
  comments    Comment[]
  bookmarks   Bookmark[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Follower -> The one who follows
// Following -> The one who is followed
// Eg: I followed my friend, then I am the follower and my friend is the following
model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  follower    User   @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Roadmap {
  id          String @id @default(cuid())
  userId      String
  title       String
  roadmap     Json
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId5")
}

model UserPurchase {
  id            String   @id @default(cuid())
  userId        String
  creditsAmount Int      // Number of credits purchased
  amount        Float    // Amount paid in currency
  currency      String   @default("USD")
  status        String   // e.g., "succeeded", "failed", "refunded"
  stripePaymentIntentId String  // Stripe Payment Intent ID
  stripePaymentIntentStatus String // Stripe Payment Intent Status
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VoiceMentor {
  id           String   @id @default(cuid())
  name         String
  description  String   @db.Text
  voiceId      String
  chatHistory  Json[]   @default([]) // Array of chat messages
  lastUsed     DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   // Foreign key to User
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}